{"version":3,"file":"static/js/139.b21b62c9.chunk.js","mappings":"mPAKMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,IAAI,EAAG,cAAcC,SAAS,oBACjDC,MAAOL,EAAAA,KAAaI,SAAS,kBAC7BE,SAAUN,EAAAA,KACPG,IAAI,EAAG,yDACPI,QACC,0BACA,sEAEDH,SAAS,0BAGDI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAMEF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,cAAe,CAAEV,MAAO,GAAIH,KAAM,GAAII,SAAU,IAChDP,iBAAkBA,EAClBiB,SAAU,SAACC,EAAQC,GACjBC,QAAQC,IAAI,SAAUH,GACtBR,GAASY,EAAAA,EAAAA,IAASJ,IAClBC,EAAQI,WACV,EAAET,UAEFU,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAX,SAAA,EACHU,EAAAA,EAAAA,MAAA,SAAAV,SAAA,CAAO,SAELF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAACvB,KAAK,OAAOwB,KAAK,UACxBf,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACzB,KAAK,aAErBqB,EAAAA,EAAAA,MAAA,SAAAV,SAAA,CAAO,UAELF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAACvB,KAAK,QAAQwB,KAAK,WACzBf,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACzB,KAAK,cAGrBqB,EAAAA,EAAAA,MAAA,SAAAV,SAAA,CAAO,aAELF,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAACvB,KAAK,WAAWwB,KAAK,cAC5Bf,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACzB,KAAK,iBAErBS,EAAAA,EAAAA,KAAA,UAAQe,KAAK,SAAQb,SAAC,mBAKhC,ECxDe,SAASe,IACtB,OACEL,EAAAA,EAAAA,MAAAX,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAAAhB,UACLF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBAETF,EAAAA,EAAAA,KAACH,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Name is required'),\n  email: Yup.string().required('Must be filled'),\n  password: Yup.string()\n    .min(6, 'Password is too short, minimum length is 6 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[0-9])/,\n      'Password must contain at least one lowercase letter and one number'\n    )\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n\n\n  return (\n    <>\n\n      {/* // кдери для логіну {\n        email: \"qwewq@mail.com\", \n      name: \"qwewq\", \n      password: \"qwewq12321\"} */}\n      <Formik\n        initialValues={{ email: '', name: '', password: '' }}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n          console.log('values', values);\n          dispatch(register(values));\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <label>\n            Name:\n            <Field name=\"name\" type=\"text\" />\n            <ErrorMessage name=\"name\" />\n          </label>\n          <label>\n            Email:\n            <Field name=\"email\" type=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n\n          <label>\n            Password:\n            <Field name=\"password\" type=\"password\" />\n            <ErrorMessage name=\"password\" />\n          </label>\n          <button type=\"submit\">Register</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { Helmet } from 'react-helmet';\n\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </>\n  );\n}\n"],"names":["validationSchema","Yup","shape","name","min","required","email","password","matches","RegisterForm","dispatch","useDispatch","_jsx","_Fragment","children","Formik","initialValues","onSubmit","values","actions","console","log","register","resetForm","_jsxs","Form","Field","type","ErrorMessage","Register","Helmet"],"sourceRoot":""}